package test.vaadin.try12.ui.main;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.jms.listener.SimpleMessageListenerContainer;
import org.springframework.stereotype.Component;
import ru.xpoft.vaadin.VaadinView;
import test.vaadin.try12.beans.AloaService;
import test.vaadin.try12.beans.MyBeanInterface;
import test.vaadin.try12.beans.Task;
import test.vaadin.try12.spring.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ShortcutAction;
import com.vaadin.external.org.slf4j.LoggerFactory;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.Command;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;
import de.syngenio.vaadin.myfirstcomponent.MyFirstComponent;

@SuppressWarnings("serial")
@VaadinView(MainView.NAME)
@Component
@Lazy(true)
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class MainView extends CustomComponent implements View
{
    @AutoGenerated
    private VerticalLayout mainLayout;

    @AutoGenerated
    private HorizontalLayout horizontalLayoutFooter;

    @AutoGenerated
    private Button buttonLogout;

    @AutoGenerated
    private GridLayout gridLayoutUser;

    @AutoGenerated
    private Label labelUser;

    @AutoGenerated
    private Embedded embeddedAvatar;

    @AutoGenerated
    private VerticalLayout spacerLeftFoot;

    @AutoGenerated
    private HorizontalSplitPanel horizontalSplitPanel;

    @AutoGenerated
    private TabSheet tabSheetContent;

    @AutoGenerated
    private Panel panelMyFirstComponent;

    @AutoGenerated
    private VerticalLayout verticalLayout_2;

    @AutoGenerated
    private MyFirstComponent myFirstComponent_1;

    @Autowired
    @AutoGenerated
    private TasksComponent tasksComponent;

    @AutoGenerated
    private Tree tree;

    @AutoGenerated
    private MenuBar menuBar;

    @AutoGenerated
    private HorizontalLayout horizontalLayoutHeader;

    private static final com.vaadin.external.org.slf4j.Logger log = LoggerFactory.getLogger(MainView.class);

    @Autowired
    SimpleMessageListenerContainer simpleMessageListenerContainer;

    public final static String NAME = "main";

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     * 
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public MainView()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here

        horizontalSplitPanel.setSplitPosition((float) 25, Unit.PERCENTAGE);

        buttonLogout.setIcon(FontAwesome.SIGN_OUT);
        buttonLogout.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event)
            {
                String username = String.valueOf(getSession().getAttribute("user"));

                // "Logout" the user
                getSession().setAttribute("user", null);

                Notification.show("User " + username + " logged out", Notification.Type.HUMANIZED_MESSAGE);
                // Refresh this view, should redirect to login view
                getUI().getNavigator().navigateTo(NAME);
            }
        });

        tabSheetContent.getTab(tasksComponent).setIcon(FontAwesome.TASKS);
    }

    @Override
    public void enter(ViewChangeEvent event)
    {
        // Get the user name from the session
        final String username = String.valueOf(getSession().getAttribute("username"));

        String avatarUri = String.valueOf(getSession().getAttribute("avatarUri"));
        Resource avatar;
        if (avatarUri != null)
        {
            avatar = new ExternalResource(avatarUri);
            embeddedAvatar.setSource(avatar);
            embeddedAvatar.setWidth("16px");
            embeddedAvatar.setHeight("16px");
        }

        // And show the username
        labelUser.setValue(username);

        // build the menu
        SpringContextHelper helper = new SpringContextHelper(VaadinServlet.getCurrent().getServletContext());
        final MyBeanInterface bean = (MyBeanInterface) helper.getBean("myBean");

        MenuItem menuItem = menuBar.addItem(bean.getName(), new Command() {

            @Override
            public void menuSelected(MenuItem selectedItem)
            {
                Notification.show(selectedItem.getText(), Notification.Type.HUMANIZED_MESSAGE);
            }
        });
        menuItem.setText(bean.getText());

    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);
        
        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        
        // horizontalLayoutHeader
        horizontalLayoutHeader = new HorizontalLayout();
        horizontalLayoutHeader.setEnabled(false);
        horizontalLayoutHeader.setImmediate(false);
        horizontalLayoutHeader.setVisible(false);
        horizontalLayoutHeader.setWidth("100.0%");
        horizontalLayoutHeader.setHeight("-1px");
        horizontalLayoutHeader.setMargin(false);
        mainLayout.addComponent(horizontalLayoutHeader);
        
        // menuBar
        menuBar = new MenuBar();
        menuBar.setImmediate(false);
        menuBar.setWidth("100.0%");
        menuBar.setHeight("-1px");
        mainLayout.addComponent(menuBar);
        
        // horizontalSplitPanel
        horizontalSplitPanel = buildHorizontalSplitPanel();
        mainLayout.addComponent(horizontalSplitPanel);
        mainLayout.setExpandRatio(horizontalSplitPanel, 1.0f);
        
        // horizontalLayoutFooter
        horizontalLayoutFooter = buildHorizontalLayoutFooter();
        mainLayout.addComponent(horizontalLayoutFooter);
        mainLayout.setExpandRatio(horizontalLayoutFooter, 0.1f);
        mainLayout.setComponentAlignment(horizontalLayoutFooter, new Alignment(48));
        
        return mainLayout;
    }

    @AutoGenerated
    private HorizontalSplitPanel buildHorizontalSplitPanel()
    {
        // common part: create layout
        horizontalSplitPanel = new HorizontalSplitPanel();
        horizontalSplitPanel.setImmediate(false);
        horizontalSplitPanel.setWidth("100.0%");
        horizontalSplitPanel.setHeight("100.0%");
        
        // tree
        tree = new Tree();
        tree.setImmediate(false);
        tree.setWidth("-1px");
        tree.setHeight("100.0%");
        horizontalSplitPanel.addComponent(tree);
        
        // tabSheetContent
        tabSheetContent = buildTabSheetContent();
        horizontalSplitPanel.addComponent(tabSheetContent);
        
        return horizontalSplitPanel;
    }

    @AutoGenerated
    private TabSheet buildTabSheetContent()
    {
        // common part: create layout
        tabSheetContent = new TabSheet();
        tabSheetContent.setImmediate(true);
        tabSheetContent.setWidth("100.0%");
        tabSheetContent.setHeight("100.0%");
        
        // tasksComponent
        tasksComponent = new TasksComponent();
        tasksComponent.setImmediate(false);
        tasksComponent.setWidth("100.0%");
        tasksComponent.setHeight("100.0%");
        tabSheetContent.addTab(tasksComponent, "Tasks", null);
        
        // panelMyFirstComponent
        panelMyFirstComponent = buildPanelMyFirstComponent();
        tabSheetContent.addTab(panelMyFirstComponent, "My 1st Component", null);
        
        return tabSheetContent;
    }

    @AutoGenerated
    private Panel buildPanelMyFirstComponent()
    {
        // common part: create layout
        panelMyFirstComponent = new Panel();
        panelMyFirstComponent.setImmediate(false);
        panelMyFirstComponent.setWidth("100.0%");
        panelMyFirstComponent.setHeight("100.0%");
        
        // verticalLayout_2
        verticalLayout_2 = buildVerticalLayout_2();
        panelMyFirstComponent.setContent(verticalLayout_2);
        
        return panelMyFirstComponent;
    }

    @AutoGenerated
    private VerticalLayout buildVerticalLayout_2()
    {
        // common part: create layout
        verticalLayout_2 = new VerticalLayout();
        verticalLayout_2.setImmediate(false);
        verticalLayout_2.setWidth("100.0%");
        verticalLayout_2.setHeight("100.0%");
        verticalLayout_2.setMargin(false);
        
        // myFirstComponent_1
        myFirstComponent_1 = new MyFirstComponent();
        myFirstComponent_1.setImmediate(false);
        myFirstComponent_1.setWidth("-1px");
        myFirstComponent_1.setHeight("-1px");
        verticalLayout_2.addComponent(myFirstComponent_1);
        
        return verticalLayout_2;
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayoutFooter()
    {
        // common part: create layout
        horizontalLayoutFooter = new HorizontalLayout();
        horizontalLayoutFooter.setImmediate(false);
        horizontalLayoutFooter.setWidth("100.0%");
        horizontalLayoutFooter.setHeight("-1px");
        horizontalLayoutFooter.setMargin(true);
        horizontalLayoutFooter.setSpacing(true);
        
        // spacerLeftFoot
        spacerLeftFoot = new VerticalLayout();
        spacerLeftFoot.setImmediate(false);
        spacerLeftFoot.setWidth("100.0%");
        spacerLeftFoot.setHeight("-1px");
        spacerLeftFoot.setMargin(false);
        horizontalLayoutFooter.addComponent(spacerLeftFoot);
        horizontalLayoutFooter.setComponentAlignment(spacerLeftFoot, new Alignment(33));
        
        // gridLayoutUser
        gridLayoutUser = buildGridLayoutUser();
        horizontalLayoutFooter.addComponent(gridLayoutUser);
        horizontalLayoutFooter.setComponentAlignment(gridLayoutUser, new Alignment(48));
        
        // buttonLogout
        buttonLogout = new Button();
        buttonLogout.setStyleName("icon-only");
        buttonLogout.setCaption("Logout");
        buttonLogout.setImmediate(true);
        buttonLogout.setWidth("-1px");
        buttonLogout.setHeight("-1px");
        horizontalLayoutFooter.addComponent(buttonLogout);
        horizontalLayoutFooter.setComponentAlignment(buttonLogout, new Alignment(34));
        
        return horizontalLayoutFooter;
    }

    @AutoGenerated
    private GridLayout buildGridLayoutUser()
    {
        // common part: create layout
        gridLayoutUser = new GridLayout();
        gridLayoutUser.setImmediate(false);
        gridLayoutUser.setWidth("-1px");
        gridLayoutUser.setHeight("-1px");
        gridLayoutUser.setMargin(false);
        gridLayoutUser.setColumns(2);
        
        // embeddedAvatar
        embeddedAvatar = new Embedded();
        embeddedAvatar.setImmediate(false);
        embeddedAvatar.setWidth("16px");
        embeddedAvatar.setHeight("16px");
        embeddedAvatar.setSource(new ThemeResource("img/component/embedded_icon.png"));
        embeddedAvatar.setType(1);
        embeddedAvatar.setMimeType("image/png");
        gridLayoutUser.addComponent(embeddedAvatar, 0, 0);
        gridLayoutUser.setComponentAlignment(embeddedAvatar, new Alignment(33));
        
        // labelUser
        labelUser = new Label();
        labelUser.setImmediate(false);
        labelUser.setWidth("100.0%");
        labelUser.setHeight("-1px");
        labelUser.setValue("Label");
        gridLayoutUser.addComponent(labelUser, 1, 0);
        gridLayoutUser.setComponentAlignment(labelUser, new Alignment(33));
        
        return gridLayoutUser;
    }

}
