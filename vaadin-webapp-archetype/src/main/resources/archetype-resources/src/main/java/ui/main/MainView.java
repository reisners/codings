package ${package}.ui.main;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.jms.listener.SimpleMessageListenerContainer;
import org.springframework.stereotype.Component;

import ${package}.auth.Role;
import ${package}.auth.UserProfile;
import ${package}.ui.NavigationHierarchyUserProfileFilter;
import ${package}.ui.SpringViewCatalogue;
import ${package}.ui.UserManager;
import ${package}.ui.VaadinView;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.external.org.slf4j.LoggerFactory;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Resource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

import de.syngenio.vaadin.synergy.AbstractSynergyLayoutFactory;
import de.syngenio.vaadin.synergy.HorizontalSynergyLayoutFactory;
import de.syngenio.vaadin.synergy.SynergyBuilder;
import de.syngenio.vaadin.synergy.SynergySelect;
import de.syngenio.vaadin.synergy.SynergyView;
import de.syngenio.vaadin.synergy.VerticalSynergyLayoutFactory;

@SuppressWarnings("serial")
@VaadinView(navigationTarget=MainView.NAME, cached=true)
@Component
@Lazy
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
public class MainView extends CustomComponent implements View
{
    @AutoGenerated
    private HorizontalLayout horizontalLayoutFooter;

    @AutoGenerated
    private Button buttonLogout;

    @AutoGenerated
    private GridLayout gridLayoutUser;

    @AutoGenerated
    private Label labelUser;

    @AutoGenerated
    private Image embeddedAvatar;

    @AutoGenerated
    private VerticalLayout spacerLeftFoot;

    private static final com.vaadin.external.org.slf4j.Logger log = LoggerFactory.getLogger(MainView.class);

    @Autowired
    private SpringViewCatalogue springViewCatalogue;
    
    @Autowired
    private UserManager userManager;
    
    private HierarchicalContainer navigationHierarchy;
    
    public final static String NAME = "";

    private Panel content;

    private SynergySelect select;
    
    public MainView()
    {
        setSizeFull();
        final VerticalLayout layout = new VerticalLayout();
        layout.setSizeFull();
        layout.setId("vLayout");
        setCompositionRoot(layout);

        final AbstractSynergyLayoutFactory layoutFactoryTopLevel = new HorizontalSynergyLayoutFactory();
        layoutFactoryTopLevel.setCompactArrangement(false);
        layoutFactoryTopLevel.setStyleName("h1");
        navigationHierarchy = (HierarchicalContainer) UI.getCurrent().getSession().getAttribute("navigationHierarchy");
        SynergyView navTopLevel = new SynergyView(layoutFactoryTopLevel, navigationHierarchy);
        select = navTopLevel.getSelect();
        navTopLevel.setWidth("100%");
        layout.addComponent(navTopLevel);
        layout.setExpandRatio(navTopLevel, 0);

        final AbstractSynergyLayoutFactory layoutFactory2ndLevel = new HorizontalSynergyLayoutFactory();
        layoutFactory2ndLevel.setStyleName("h2");
        SynergyView nav2ndLevel = new SynergyView(layoutFactory2ndLevel, navTopLevel);
        nav2ndLevel.setWidth("100%");
        layout.addComponent(nav2ndLevel);
        layout.setExpandRatio(nav2ndLevel, 0);

        navTopLevel.setSubView(nav2ndLevel);
        
        Label greenBar = new Label();
        greenBar.setWidth("100%");
        greenBar.setHeight("3px");
        greenBar.setStyleName("greenbar");
        layout.addComponent(greenBar);
        layout.setExpandRatio(greenBar, 0);
        layout.setComponentAlignment(greenBar, Alignment.TOP_CENTER);
        
        com.vaadin.ui.HorizontalSplitPanel hsplit = new com.vaadin.ui.HorizontalSplitPanel();
        layout.addComponent(hsplit);
        layout.setExpandRatio(hsplit, 1);
        
        SynergyView vsv = new SynergyView(new VerticalSynergyLayoutFactory(), nav2ndLevel);
        vsv.setSizeFull();
        hsplit.setFirstComponent(vsv);
        
        nav2ndLevel.setSubView(vsv);
        
        content = new Panel();
        content.setStyleName("content");
        content.setSizeFull();
        Label noContent = new Label("No content");
        noContent.setWidth("600px");
        noContent.setHeight("400px");
        content.setContent(noContent);
        
        hsplit.setSecondComponent(content);
        hsplit.setSplitPosition(20, Unit.PERCENTAGE);
        hsplit.setSizeFull();

        buildHorizontalLayoutFooter();
        layout.addComponent(horizontalLayoutFooter);
        
        buttonLogout.setIcon(FontAwesome.SIGN_OUT);
        buttonLogout.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event)
            {
                UserProfile userProfile = (UserProfile) getSession().getAttribute("userProfile");
                logout();

                Notification.show("User " + userProfile.getUserId()+ " logged out", Notification.Type.HUMANIZED_MESSAGE);
                // Refresh this view, should redirect to login view
                getUI().getNavigator().navigateTo(NAME);
            }
        });
        
//        createAndRegisterViews();

    }
    
    private void logout()
    {
        select.unselect(select.getValue());
        
        // "Logout" the user
        getSession().setAttribute("userProfile", null);
        
        navigationHierarchy.removeAllContainerFilters();
    }
    
//    private void createAndRegisterViews()
//    {
//        // create and register some views to navigate to
//        Navigator navigator = getUI().getNavigator();
//        navigator.addView("", new MyView("view0"));
//        for (int i = 1; i <= 5; ++i) {
//            String viewName = "view"+i;
//            MyView view = new MyView(viewName);
//            navigator.addView(viewName, view);
//        }
//    }
    
    @Component
    @Lazy
    @Scope(BeanDefinition.SCOPE_PROTOTYPE)
    private static class MyView extends CustomComponent implements View {
        
        public MyView()
        {
            String name = this.getClass().getSimpleName();
            VerticalLayout vlayout = new VerticalLayout();
            vlayout.addComponent(new Label(name));
            vlayout.setSpacing(true);
            vlayout.setMargin(true);
            final String option = "More";
            Button b = new Button("Add "+option );
            b.addClickListener(new Button.ClickListener() {
                
                @Override
                public void buttonClick(ClickEvent event)
                {
//                    hierarchicalContainer.addItem(option);
                }
            });
            vlayout.addComponent(b);
            setCompositionRoot(vlayout);
        }

        @Override
        public void enter(ViewChangeEvent event)
        {
            log.info("entered view "+this);
        }
    }
    
    @VaadinView(navigationTarget="|Administration|Benutzer|Verwaltung", allowedForRoles={Role.admin, Role.master})
    @Component
    @Lazy
    @Scope(BeanDefinition.SCOPE_PROTOTYPE)
    public static class MyView1 extends MyView {
        public MyView1() {
            super();
        }
    }
    
    @VaadinView(navigationTarget="|Tools|Collaboration|Chat", allowedForRoles={Role.user, Role.master}, cached=true)
    @Component
    @Lazy
    @Scope(BeanDefinition.SCOPE_PROTOTYPE)
    public static class ChatView extends CustomComponent implements View {
        @Autowired
        private EventBus eventBus;
        
        private ListSelect list;
        private TextField textfield;
        
        public ChatView() {
            VerticalLayout vlayout = new VerticalLayout();
            vlayout.setSizeFull();
            list = new ListSelect();
//            list.setSizeFull();
            vlayout.addComponent(list);
//            vlayout.setExpandRatio(list, 1);
            textfield = new TextField();
            vlayout.addComponent(textfield);
            textfield.addValueChangeListener(new ValueChangeListener() {

                @Override
                public void valueChange(ValueChangeEvent event)
                {
                    final String text = textfield.getValue().trim();
                    if (!"".equals(text)) {
                        UserProfile userProfile = (UserProfile) getSession().getAttribute("userProfile");
                        String userName = userProfile.getRealName();
                        final String message = userName+":"+text;
                        eventBus.post(message);
                        debug("I just posted "+message);
                        textfield.clear();
                    }
                }
                
            });
            setCompositionRoot(vlayout);
        }
        
        @Subscribe
        public void receive(final String message) {
            final UI ui = UI.getCurrent();
            ui.access(new Runnable() {
                @Override
                public void run()
                {
                    debug("I just received "+message);
                    list.addItem(message);
                    ui.push();
                }
            });
        }
        
        public void debug(String text)
        {
            UserProfile userProfile = (UserProfile) getSession().getAttribute("userProfile");
            log.info("I'm "+this+" in "+userProfile.getRealName()+" and "+text);
        }

        @Override
        public void enter(ViewChangeEvent event)
        {
            list.clear();
            textfield.clear();
            UserProfile userProfile = (UserProfile) getSession().getAttribute("userProfile");
            log.info("I'm "+this+" and I live in "+userProfile.getRealName()+"'s session");
        }
    }
    
    @VaadinView(navigationTarget="|Tools|Specification|MappingCases", allowedForRoles={Role.user, Role.master}, cached=true)
    @Component
    public static class MyView3 extends MyView {
        public MyView3() {
            super();
        }
    }

    @Override
    public void enter(ViewChangeEvent event)
    {
        // Get the user name from the session
        UserProfile userProfile= (UserProfile) getSession().getAttribute("userProfile");
        
        String avatarUri = String.valueOf(getSession().getAttribute("avatarUri"));
        Resource avatar;
        if (avatarUri != null)
        {
            avatar = new ExternalResource(avatarUri);
            embeddedAvatar.setSource(avatar);
            embeddedAvatar.setWidth("32px");
            embeddedAvatar.setHeight("32px");
        }

        // And show the username
        labelUser.setValue(userProfile.getRealName());
        
        updateUserList();
    }

    @Subscribe
    public void receiveUserManagerEvent(UserManager um) {
        log.info("receiveUserManagerEvent: "+userManager.getUserProfiles().size()+" profiles now");
        final UI ui = UI.getCurrent();
        ui.access(new Runnable() {
            @Override
            public void run()
            {
                updateUserList();
                ui.push();
            }
        });
    }
    
    private void updateUserList()
    {
        String baseId = "|Tools|Collaboration|Chat";
        // first check if user see this item at all
        if (navigationHierarchy.getItem(baseId) == null) {
            return;
        }
        removeAllUserItems();
        UserProfile ownUserProfile = (UserProfile) UI.getCurrent().getSession().getAttribute("userProfile");
        for (UserProfile userProfile : userManager.getUserProfiles()) {
            if (!userProfile.equals(ownUserProfile)) {
                final String itemId = baseId+"/"+userProfile.getUserId();
                Item item = navigationHierarchy.addItem(itemId);
                navigationHierarchy.setParent(itemId, baseId);
                item.getItemProperty(SynergyBuilder.PROPERTY_ITEM_COMPONENT_CAPTION).setValue(userProfile.getRealName());
                item.getItemProperty(SynergyBuilder.PROPERTY_TARGET_NAVIGATION_STATE).setValue(itemId);
                item.getItemProperty(SynergyBuilder.PROPERTY_ITEM_COMPONENT_SOURCE).setValue(userProfile.getAvatarUri());
            }
        }
    }

    /**
     * Removes all children of |Tools|Collaboration|Chat
     */
    private void removeAllUserItems()
    {
        List<Object> itemIdsToBeRemoved = new ArrayList<Object>();
        for (Object itemId : navigationHierarchy.getItemIds()) {
            Object parentId = navigationHierarchy.getParent(itemId);
            if ("|Tools|Collaboration|Chat".equals(parentId)) {
                itemIdsToBeRemoved.add(itemId);
            }
        }
        for (Object itemIdTobeRemoved : itemIdsToBeRemoved) {
            navigationHierarchy.removeItem(itemIdTobeRemoved);
        }
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayoutFooter()
    {
        // common part: create layout
        horizontalLayoutFooter = new HorizontalLayout();
        horizontalLayoutFooter.setImmediate(false);
        horizontalLayoutFooter.setWidth("100.0%");
        horizontalLayoutFooter.setHeight("-1px");
        horizontalLayoutFooter.setMargin(true);
        horizontalLayoutFooter.setSpacing(true);
        
        // spacerLeftFoot
        spacerLeftFoot = new VerticalLayout();
        spacerLeftFoot.setImmediate(false);
        spacerLeftFoot.setWidth("100.0%");
        spacerLeftFoot.setHeight("-1px");
        spacerLeftFoot.setMargin(false);
        horizontalLayoutFooter.addComponent(spacerLeftFoot);
        horizontalLayoutFooter.setComponentAlignment(spacerLeftFoot, new Alignment(33));
        
        // gridLayoutUser
        gridLayoutUser = buildGridLayoutUser();
        horizontalLayoutFooter.addComponent(gridLayoutUser);
        horizontalLayoutFooter.setComponentAlignment(gridLayoutUser, new Alignment(48));
        
        // buttonLogout
        buttonLogout = new Button();
        buttonLogout.setStyleName("icon-only");
        buttonLogout.setCaption("Logout");
        buttonLogout.setImmediate(true);
        buttonLogout.setWidth("-1px");
        buttonLogout.setHeight("-1px");
        horizontalLayoutFooter.addComponent(buttonLogout);
        horizontalLayoutFooter.setComponentAlignment(buttonLogout, new Alignment(34));
        
        return horizontalLayoutFooter;
    }

    @AutoGenerated
    private GridLayout buildGridLayoutUser()
    {
        // common part: create layout
        gridLayoutUser = new GridLayout();
        gridLayoutUser.setImmediate(false);
        gridLayoutUser.setWidth("-1px");
        gridLayoutUser.setHeight("-1px");
        gridLayoutUser.setMargin(false);
        gridLayoutUser.setSpacing(true);
        gridLayoutUser.setColumns(2);
        
        // embeddedAvatar
        embeddedAvatar = new Image();
        embeddedAvatar.setWidth("32px");
        embeddedAvatar.setHeight("32px");
        embeddedAvatar.setSource(FontAwesome.USER);
        gridLayoutUser.addComponent(embeddedAvatar, 0, 0);
        gridLayoutUser.setComponentAlignment(embeddedAvatar, new Alignment(33));
        
        // labelUser
        labelUser = new Label();
        labelUser.setImmediate(false);
        labelUser.setWidth("100.0%");
        labelUser.setHeight("-1px");
        labelUser.setValue("Label");
        gridLayoutUser.addComponent(labelUser, 1, 0);
        gridLayoutUser.setComponentAlignment(labelUser, new Alignment(33));
        
        return gridLayoutUser;
    }

    public Panel getContentPanel()
    {
        return content;
    }

    public HierarchicalContainer getNavigationHierarchy()
    {
        return navigationHierarchy;
    }

    public void setUserProfile(UserProfile userProfile)
    {
        navigationHierarchy.addContainerFilter(new NavigationHierarchyUserProfileFilter(navigationHierarchy, springViewCatalogue, userProfile));
        List< ? > itemIds = navigationHierarchy.getItemIds();
        log.info("container "+navigationHierarchy+" visible itemIds="+itemIds);
        log.info("container "+select.getContainerDataSource());
    }
}
