package ${package}.ui.main;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.jms.listener.SimpleMessageListenerContainer;
import org.springframework.stereotype.Component;

import ${package}.beans.AloaService;
import ${package}.beans.Task;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ShortcutAction;
import com.vaadin.external.org.slf4j.LoggerFactory;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Table.ColumnReorderEvent;
import com.vaadin.ui.Table.ColumnResizeEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnReorderListener;
import com.vaadin.ui.Table.ColumnResizeListener;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
@Component
@Lazy(true)
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class TasksComponent extends CustomComponent
{
    @AutoGenerated
    private VerticalLayout mainLayout;

    @AutoGenerated
    private Table tableTasks;

    @AutoGenerated
    private Button buttonAddTask;

    private static final com.vaadin.external.org.slf4j.Logger log = LoggerFactory.getLogger(TasksComponent.class);

    @Autowired
    AloaService aloaService;

    @Autowired
    SimpleMessageListenerContainer simpleMessageListenerContainer;

    protected Button edit;
    protected Button save;
    protected Button cancel;

    protected List<Field> fields = new ArrayList<Field>();

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     * 
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public TasksComponent()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here

        final BeanContainer<String, Task> beans = new BeanContainer<String, Task>(Task.class);

        // Use the name property as the item ID of the bean
        beans.setBeanIdProperty("id");

        // Add some beans to it
        beans.addBean(new Task("Mung bean", new Date(2014, 8, 1)));
        beans.addBean(new Task("Chickpea", new Date(2014, 8, 2)));
        beans.addBean(new Task("Lentil", new Date(2014, 8, 3)));
        beans.addBean(new Task("Common bean", new Date(2014, 8, 4)));
        beans.addBean(new Task("Soybean", new Date(2014, 8, 5)));

        tableTasks.setContainerDataSource(beans);
        tableTasks.setSelectable(true);
        // tableTasks.setEditable(true);

        edit = new Button("Edit", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent)
            {
                configureEditable(true);
            }
        });

        save = new Button("Save", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent)
            {
                commit();
                configureEditable(false);
            }
        });

        cancel = new Button("Cancel", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent)
            {
                discard();
                configureEditable(false);
            }
        });

        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE);
        save.setClickShortcut(ShortcutAction.KeyCode.ENTER);

        configureEditable(false);

        tableTasks.setTableFieldFactory(new DefaultFieldFactory() {
            @Override
            public Field< ? > createField(Container container, Object itemId, Object propertyId, com.vaadin.ui.Component uiContext)
            {
                // If the itemId isn't the currently selected item in the table,
                // don't generate a field
                // i.e. it's not editable
                if (!itemId.equals(tableTasks.getValue()))
                {
                    return null;
                }

                // Let the default factory build the field : you can and
                // probably should do far more
                // Logic here
                Field field = super.createField(container, itemId, propertyId, uiContext);

                // Make the field buffered - this lets us discard the value
                field.setBuffered(true);

                // Let's keep track of all of the attached fields
                field.addAttachListener(new AttachListener() {
                    @Override
                    public void attach(AttachEvent attachEvent)
                    {
                        fields.add((Field) attachEvent.getConnector());
                    }
                });
                field.addDetachListener(new DetachListener() {
                    @Override
                    public void detach(DetachEvent event)
                    {
                        fields.remove((Field) event.getConnector());
                    }
                });

                return field;
            }
        });

        // Double click on a row: make it editable
        tableTasks.addItemClickListener(new ItemClickEvent.ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent itemClickEvent)
            {
                if (itemClickEvent.isDoubleClick() && !tableTasks.isEditable())
                {
                    tableTasks.setValue(itemClickEvent.getItemId());
                    configureEditable(true);
                }
            }
        });
        tableTasks.setMultiSelect(false);
        tableTasks.setColumnCollapsingAllowed(true);
        tableTasks.setColumnReorderingAllowed(true);
        tableTasks.addColumnReorderListener(new ColumnReorderListener() {
            @Override
            public void columnReorder(ColumnReorderEvent event)
            {
                log.info("column reorder event "+Arrays.asList(tableTasks.getColumnHeaders()));
            }
        });
        tableTasks.addColumnResizeListener(new ColumnResizeListener() {
            
            @Override
            public void columnResize(ColumnResizeEvent event)
            {
                log.info("column resize event "+event.getPropertyId()+": "+event.getPreviousWidth()+" --> "+event.getCurrentWidth());
            }
        });

        buttonAddTask.setIcon(FontAwesome.PLUS_CIRCLE);
        buttonAddTask.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event)
            {
                beans.addBean(new Task("undefined", new Date()));
            }
        });

        mainLayout.addComponent(edit);
        mainLayout.addComponent(save);
        mainLayout.addComponent(cancel);
    }

    protected void configureEditable(boolean editable)
    {
        tableTasks.setSelectable(!editable);
        tableTasks.setEditable(editable);
        save.setVisible(editable);
        cancel.setVisible(editable);
        edit.setVisible(!editable);
        if (editable && !fields.isEmpty())
        {
            fields.get(0).focus();
        }
    }

    /**
     * Commit all field edits.
     * 
     * NB: Should handle validation problems here
     */
    protected void commit()
    {
        for (Field field : fields)
        {
            field.commit();
        }
    }

    /**
     * Discard any field edits
     */
    protected void discard()
    {
        for (Field field : fields)
        {
            field.discard();
        }
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);
        
        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        
        // buttonAddTask
        buttonAddTask = new Button();
        buttonAddTask.setStyleName("icon-only");
        buttonAddTask.setCaption("New Task");
        buttonAddTask.setImmediate(true);
        buttonAddTask.setWidth("-1px");
        buttonAddTask.setHeight("-1px");
        mainLayout.addComponent(buttonAddTask);
        
        // tableTasks
        tableTasks = new Table();
        tableTasks.setImmediate(false);
        tableTasks.setWidth("100.0%");
        tableTasks.setHeight("100.0%");
        mainLayout.addComponent(tableTasks);
        mainLayout.setExpandRatio(tableTasks, 1.0f);
        
        return mainLayout;
    }

}
